#!/usr/bin/env python3
#
# Given a C file, print CFLAGS/CXXFLAGS required to compile it
# as specified in its header. The header should have the following syntax:
#
#   header ::= directive *
#   directive ::= "//!" \s * param \s * ":" \s * value \s * "\n"
#   param ::= [^\n:] +
#   value ::= [^\n] +
#
# For example:
#
#   //! library: m
#   //! library: gc
#   //! library_dir: vendor/gc
#
# Available options are:
#
#   library -- link with other binaries
#   library_dir -- where to look for said binaries
#   include_dir -- additional directories for header files
#   file -- additional C/C++ files to link into the result
#
# All directories are relative to the source file.
#
import os
import sys
import shlex


def main(argv):
    if len(argv) != 2:
        print("usage: {} <filename>".format(argv[0]), file=sys.stderr)
        return 1

    filename = os.path.realpath(argv[1])
    relative = os.path.dirname(filename)

    def parsepath(p):
        a = p if os.path.isabs(p) else os.path.normpath(os.path.join(relative, p))
        return min((a, os.path.relpath(a)), key=len)

    args = []
    dirs = []

    with open(filename, "r") as fd:
        for line in fd:
            if not line.startswith("//!"):
                break

            param, ok, value = line[3:].partition(':')
            param = param.strip()
            value = value.strip()

            if not ok: pass
            elif param == "library":     args.append("-l" + shlex.quote(value))
            elif param == "library_dir": dirs.append("-L" + shlex.quote(parsepath(value)))
            elif param == "include_dir": dirs.append("-I" + shlex.quote(parsepath(value)))
            elif param == "file":        args.append(parsepath(value))
            else: print("warning: unknown directive {!r}".format(param), file=sys.stderr)

    print(" ".join(dirs + args))
    return 0

exit(main(sys.argv))
